// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "types.pb.hh"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FTSFC {
class StateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<State> {
} _State_default_instance_;
class TimestampStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimestampState> {
} _TimestampState_default_instance_;
class PiggyBackStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PiggyBackState> {
} _PiggyBackState_default_instance_;
class PiggyBackMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PiggyBackMessage> {
} _PiggyBackMessage_default_instance_;

namespace protobuf_types_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, val_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampState, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampState, state_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiggyBackState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiggyBackState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiggyBackState, ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiggyBackState, last_commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiggyBackState, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiggyBackState, state_),
  3,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiggyBackMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiggyBackMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiggyBackMessage, mb_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiggyBackMessage, pb_state_),
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(State)},
  { 9, 16, sizeof(TimestampState)},
  { 18, 27, sizeof(PiggyBackState)},
  { 31, 38, sizeof(PiggyBackMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimestampState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PiggyBackState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PiggyBackMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "types.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _State_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TimestampState_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PiggyBackState_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PiggyBackMessage_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _State_default_instance_.DefaultConstruct();
  _TimestampState_default_instance_.DefaultConstruct();
  _PiggyBackState_default_instance_.DefaultConstruct();
  _PiggyBackMessage_default_instance_.DefaultConstruct();
  _TimestampState_default_instance_.get_mutable()->state_ = const_cast< ::FTSFC::State*>(
      ::FTSFC::State::internal_default_instance());
  _PiggyBackState_default_instance_.get_mutable()->state_ = const_cast< ::FTSFC::State*>(
      ::FTSFC::State::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013types.proto\022\005FTSFC\"!\n\005State\022\013\n\003key\030\001 \003"
      "(\t\022\013\n\003val\030\002 \003(\t\"@\n\016TimestampState\022\021\n\ttim"
      "estamp\030\001 \002(\003\022\033\n\005state\030\002 \001(\0132\014.FTSFC.Stat"
      "e\"b\n\016PiggyBackState\022\013\n\003ack\030\001 \002(\005\022\023\n\013last"
      "_commit\030\002 \002(\003\022\021\n\ttimestamp\030\003 \002(\003\022\033\n\005stat"
      "e\030\004 \001(\0132\014.FTSFC.State\"J\n\020PiggyBackMessag"
      "e\022\r\n\005mb_id\030\001 \003(\005\022\'\n\010pb_state\030\002 \003(\0132\025.FTS"
      "FC.PiggyBackState"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "types.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_types_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kKeyFieldNumber;
const int State::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FTSFC.State)
}
State::State(const State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      key_(from.key_),
      val_(from.val_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FTSFC.State)
}

void State::SharedCtor() {
  _cached_size_ = 0;
}

State::~State() {
  // @@protoc_insertion_point(destructor:FTSFC.State)
  SharedDtor();
}

void State::SharedDtor() {
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const State& State::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

State* State::New(::google::protobuf::Arena* arena) const {
  State* n = new State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:FTSFC.State)
  key_.Clear();
  val_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FTSFC.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key(this->key_size() - 1).data(),
            this->key(this->key_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FTSFC.State.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val(this->val_size() - 1).data(),
            this->val(this->val_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FTSFC.State.val");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FTSFC.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FTSFC.State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FTSFC.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string key = 1;
  for (int i = 0, n = this->key_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key(i).data(), this->key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FTSFC.State.key");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(i), output);
  }

  // repeated string val = 2;
  for (int i = 0, n = this->val_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val(i).data(), this->val(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FTSFC.State.val");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->val(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FTSFC.State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTSFC.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string key = 1;
  for (int i = 0, n = this->key_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key(i).data(), this->key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FTSFC.State.key");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->key(i), target);
  }

  // repeated string val = 2;
  for (int i = 0, n = this->val_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val(i).data(), this->val(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FTSFC.State.val");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->val(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTSFC.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTSFC.State)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string key = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->key_size());
  for (int i = 0, n = this->key_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->key(i));
  }

  // repeated string val = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->val_size());
  for (int i = 0, n = this->val_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->val(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTSFC.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTSFC.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTSFC.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTSFC.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
  val_.MergeFrom(from.val_);
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTSFC.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTSFC.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  key_.InternalSwap(&other->key_);
  val_.InternalSwap(&other->val_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// State

// repeated string key = 1;
int State::key_size() const {
  return key_.size();
}
void State::clear_key() {
  key_.Clear();
}
const ::std::string& State::key(int index) const {
  // @@protoc_insertion_point(field_get:FTSFC.State.key)
  return key_.Get(index);
}
::std::string* State::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:FTSFC.State.key)
  return key_.Mutable(index);
}
void State::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FTSFC.State.key)
  key_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void State::set_key(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FTSFC.State.key)
  key_.Mutable(index)->assign(std::move(value));
}
#endif
void State::set_key(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FTSFC.State.key)
}
void State::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FTSFC.State.key)
}
::std::string* State::add_key() {
  // @@protoc_insertion_point(field_add_mutable:FTSFC.State.key)
  return key_.Add();
}
void State::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FTSFC.State.key)
}
#if LANG_CXX11
void State::add_key(::std::string&& value) {
  key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FTSFC.State.key)
}
#endif
void State::add_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FTSFC.State.key)
}
void State::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FTSFC.State.key)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
State::key() const {
  // @@protoc_insertion_point(field_list:FTSFC.State.key)
  return key_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
State::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:FTSFC.State.key)
  return &key_;
}

// repeated string val = 2;
int State::val_size() const {
  return val_.size();
}
void State::clear_val() {
  val_.Clear();
}
const ::std::string& State::val(int index) const {
  // @@protoc_insertion_point(field_get:FTSFC.State.val)
  return val_.Get(index);
}
::std::string* State::mutable_val(int index) {
  // @@protoc_insertion_point(field_mutable:FTSFC.State.val)
  return val_.Mutable(index);
}
void State::set_val(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FTSFC.State.val)
  val_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void State::set_val(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FTSFC.State.val)
  val_.Mutable(index)->assign(std::move(value));
}
#endif
void State::set_val(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FTSFC.State.val)
}
void State::set_val(int index, const char* value, size_t size) {
  val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FTSFC.State.val)
}
::std::string* State::add_val() {
  // @@protoc_insertion_point(field_add_mutable:FTSFC.State.val)
  return val_.Add();
}
void State::add_val(const ::std::string& value) {
  val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FTSFC.State.val)
}
#if LANG_CXX11
void State::add_val(::std::string&& value) {
  val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FTSFC.State.val)
}
#endif
void State::add_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FTSFC.State.val)
}
void State::add_val(const char* value, size_t size) {
  val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FTSFC.State.val)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
State::val() const {
  // @@protoc_insertion_point(field_list:FTSFC.State.val)
  return val_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
State::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:FTSFC.State.val)
  return &val_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimestampState::kTimestampFieldNumber;
const int TimestampState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimestampState::TimestampState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FTSFC.TimestampState)
}
TimestampState::TimestampState(const TimestampState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::FTSFC::State(*from.state_);
  } else {
    state_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:FTSFC.TimestampState)
}

void TimestampState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&state_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&state_) + sizeof(timestamp_));
}

TimestampState::~TimestampState() {
  // @@protoc_insertion_point(destructor:FTSFC.TimestampState)
  SharedDtor();
}

void TimestampState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete state_;
  }
}

void TimestampState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimestampState::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimestampState& TimestampState::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimestampState* TimestampState::New(::google::protobuf::Arena* arena) const {
  TimestampState* n = new TimestampState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimestampState::Clear() {
// @@protoc_insertion_point(message_clear_start:FTSFC.TimestampState)
  if (has_state()) {
    GOOGLE_DCHECK(state_ != NULL);
    state_->::FTSFC::State::Clear();
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimestampState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FTSFC.TimestampState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .FTSFC.State state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FTSFC.TimestampState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FTSFC.TimestampState)
  return false;
#undef DO_
}

void TimestampState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FTSFC.TimestampState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .FTSFC.State state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FTSFC.TimestampState)
}

::google::protobuf::uint8* TimestampState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTSFC.TimestampState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .FTSFC.State state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->state_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTSFC.TimestampState)
  return target;
}

size_t TimestampState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTSFC.TimestampState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int64 timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }
  // optional .FTSFC.State state = 2;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimestampState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTSFC.TimestampState)
  GOOGLE_DCHECK_NE(&from, this);
  const TimestampState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimestampState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTSFC.TimestampState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTSFC.TimestampState)
    MergeFrom(*source);
  }
}

void TimestampState::MergeFrom(const TimestampState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTSFC.TimestampState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::FTSFC::State::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimestampState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTSFC.TimestampState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimestampState::CopyFrom(const TimestampState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTSFC.TimestampState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void TimestampState::Swap(TimestampState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimestampState::InternalSwap(TimestampState* other) {
  std::swap(state_, other->state_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimestampState::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimestampState

// required int64 timestamp = 1;
bool TimestampState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimestampState::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void TimestampState::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimestampState::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 TimestampState::timestamp() const {
  // @@protoc_insertion_point(field_get:FTSFC.TimestampState.timestamp)
  return timestamp_;
}
void TimestampState::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:FTSFC.TimestampState.timestamp)
}

// optional .FTSFC.State state = 2;
bool TimestampState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimestampState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void TimestampState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimestampState::clear_state() {
  if (state_ != NULL) state_->::FTSFC::State::Clear();
  clear_has_state();
}
const ::FTSFC::State& TimestampState::state() const {
  // @@protoc_insertion_point(field_get:FTSFC.TimestampState.state)
  return state_ != NULL ? *state_
                         : *::FTSFC::State::internal_default_instance();
}
::FTSFC::State* TimestampState::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::FTSFC::State;
  }
  // @@protoc_insertion_point(field_mutable:FTSFC.TimestampState.state)
  return state_;
}
::FTSFC::State* TimestampState::release_state() {
  // @@protoc_insertion_point(field_release:FTSFC.TimestampState.state)
  clear_has_state();
  ::FTSFC::State* temp = state_;
  state_ = NULL;
  return temp;
}
void TimestampState::set_allocated_state(::FTSFC::State* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:FTSFC.TimestampState.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiggyBackState::kAckFieldNumber;
const int PiggyBackState::kLastCommitFieldNumber;
const int PiggyBackState::kTimestampFieldNumber;
const int PiggyBackState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiggyBackState::PiggyBackState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FTSFC.PiggyBackState)
}
PiggyBackState::PiggyBackState(const PiggyBackState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::FTSFC::State(*from.state_);
  } else {
    state_ = NULL;
  }
  ::memcpy(&last_commit_, &from.last_commit_,
    reinterpret_cast<char*>(&ack_) -
    reinterpret_cast<char*>(&last_commit_) + sizeof(ack_));
  // @@protoc_insertion_point(copy_constructor:FTSFC.PiggyBackState)
}

void PiggyBackState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&state_, 0, reinterpret_cast<char*>(&ack_) -
    reinterpret_cast<char*>(&state_) + sizeof(ack_));
}

PiggyBackState::~PiggyBackState() {
  // @@protoc_insertion_point(destructor:FTSFC.PiggyBackState)
  SharedDtor();
}

void PiggyBackState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete state_;
  }
}

void PiggyBackState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PiggyBackState::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PiggyBackState& PiggyBackState::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

PiggyBackState* PiggyBackState::New(::google::protobuf::Arena* arena) const {
  PiggyBackState* n = new PiggyBackState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PiggyBackState::Clear() {
// @@protoc_insertion_point(message_clear_start:FTSFC.PiggyBackState)
  if (has_state()) {
    GOOGLE_DCHECK(state_ != NULL);
    state_->::FTSFC::State::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&last_commit_, 0, reinterpret_cast<char*>(&ack_) -
      reinterpret_cast<char*>(&last_commit_) + sizeof(ack_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PiggyBackState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FTSFC.PiggyBackState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ack = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_commit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_last_commit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .FTSFC.State state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FTSFC.PiggyBackState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FTSFC.PiggyBackState)
  return false;
#undef DO_
}

void PiggyBackState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FTSFC.PiggyBackState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ack = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ack(), output);
  }

  // required int64 last_commit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_commit(), output);
  }

  // required int64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional .FTSFC.State state = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->state_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FTSFC.PiggyBackState)
}

::google::protobuf::uint8* PiggyBackState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTSFC.PiggyBackState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ack = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ack(), target);
  }

  // required int64 last_commit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_commit(), target);
  }

  // required int64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional .FTSFC.State state = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->state_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTSFC.PiggyBackState)
  return target;
}

size_t PiggyBackState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:FTSFC.PiggyBackState)
  size_t total_size = 0;

  if (has_last_commit()) {
    // required int64 last_commit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_commit());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_ack()) {
    // required int32 ack = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ack());
  }

  return total_size;
}
size_t PiggyBackState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTSFC.PiggyBackState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required int64 last_commit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_commit());

    // required int64 timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required int32 ack = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ack());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .FTSFC.State state = 4;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PiggyBackState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTSFC.PiggyBackState)
  GOOGLE_DCHECK_NE(&from, this);
  const PiggyBackState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PiggyBackState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTSFC.PiggyBackState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTSFC.PiggyBackState)
    MergeFrom(*source);
  }
}

void PiggyBackState::MergeFrom(const PiggyBackState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTSFC.PiggyBackState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::FTSFC::State::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      last_commit_ = from.last_commit_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      ack_ = from.ack_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiggyBackState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTSFC.PiggyBackState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiggyBackState::CopyFrom(const PiggyBackState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTSFC.PiggyBackState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiggyBackState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  return true;
}

void PiggyBackState::Swap(PiggyBackState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiggyBackState::InternalSwap(PiggyBackState* other) {
  std::swap(state_, other->state_);
  std::swap(last_commit_, other->last_commit_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(ack_, other->ack_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PiggyBackState::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PiggyBackState

// required int32 ack = 1;
bool PiggyBackState::has_ack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PiggyBackState::set_has_ack() {
  _has_bits_[0] |= 0x00000008u;
}
void PiggyBackState::clear_has_ack() {
  _has_bits_[0] &= ~0x00000008u;
}
void PiggyBackState::clear_ack() {
  ack_ = 0;
  clear_has_ack();
}
::google::protobuf::int32 PiggyBackState::ack() const {
  // @@protoc_insertion_point(field_get:FTSFC.PiggyBackState.ack)
  return ack_;
}
void PiggyBackState::set_ack(::google::protobuf::int32 value) {
  set_has_ack();
  ack_ = value;
  // @@protoc_insertion_point(field_set:FTSFC.PiggyBackState.ack)
}

// required int64 last_commit = 2;
bool PiggyBackState::has_last_commit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PiggyBackState::set_has_last_commit() {
  _has_bits_[0] |= 0x00000002u;
}
void PiggyBackState::clear_has_last_commit() {
  _has_bits_[0] &= ~0x00000002u;
}
void PiggyBackState::clear_last_commit() {
  last_commit_ = GOOGLE_LONGLONG(0);
  clear_has_last_commit();
}
::google::protobuf::int64 PiggyBackState::last_commit() const {
  // @@protoc_insertion_point(field_get:FTSFC.PiggyBackState.last_commit)
  return last_commit_;
}
void PiggyBackState::set_last_commit(::google::protobuf::int64 value) {
  set_has_last_commit();
  last_commit_ = value;
  // @@protoc_insertion_point(field_set:FTSFC.PiggyBackState.last_commit)
}

// required int64 timestamp = 3;
bool PiggyBackState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PiggyBackState::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void PiggyBackState::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void PiggyBackState::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 PiggyBackState::timestamp() const {
  // @@protoc_insertion_point(field_get:FTSFC.PiggyBackState.timestamp)
  return timestamp_;
}
void PiggyBackState::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:FTSFC.PiggyBackState.timestamp)
}

// optional .FTSFC.State state = 4;
bool PiggyBackState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PiggyBackState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void PiggyBackState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void PiggyBackState::clear_state() {
  if (state_ != NULL) state_->::FTSFC::State::Clear();
  clear_has_state();
}
const ::FTSFC::State& PiggyBackState::state() const {
  // @@protoc_insertion_point(field_get:FTSFC.PiggyBackState.state)
  return state_ != NULL ? *state_
                         : *::FTSFC::State::internal_default_instance();
}
::FTSFC::State* PiggyBackState::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::FTSFC::State;
  }
  // @@protoc_insertion_point(field_mutable:FTSFC.PiggyBackState.state)
  return state_;
}
::FTSFC::State* PiggyBackState::release_state() {
  // @@protoc_insertion_point(field_release:FTSFC.PiggyBackState.state)
  clear_has_state();
  ::FTSFC::State* temp = state_;
  state_ = NULL;
  return temp;
}
void PiggyBackState::set_allocated_state(::FTSFC::State* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:FTSFC.PiggyBackState.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiggyBackMessage::kMbIdFieldNumber;
const int PiggyBackMessage::kPbStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiggyBackMessage::PiggyBackMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FTSFC.PiggyBackMessage)
}
PiggyBackMessage::PiggyBackMessage(const PiggyBackMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mb_id_(from.mb_id_),
      pb_state_(from.pb_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FTSFC.PiggyBackMessage)
}

void PiggyBackMessage::SharedCtor() {
  _cached_size_ = 0;
}

PiggyBackMessage::~PiggyBackMessage() {
  // @@protoc_insertion_point(destructor:FTSFC.PiggyBackMessage)
  SharedDtor();
}

void PiggyBackMessage::SharedDtor() {
}

void PiggyBackMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PiggyBackMessage::descriptor() {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PiggyBackMessage& PiggyBackMessage::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

PiggyBackMessage* PiggyBackMessage::New(::google::protobuf::Arena* arena) const {
  PiggyBackMessage* n = new PiggyBackMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PiggyBackMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:FTSFC.PiggyBackMessage)
  mb_id_.Clear();
  pb_state_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PiggyBackMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FTSFC.PiggyBackMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 mb_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_mb_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mb_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .FTSFC.PiggyBackState pb_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pb_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FTSFC.PiggyBackMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FTSFC.PiggyBackMessage)
  return false;
#undef DO_
}

void PiggyBackMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FTSFC.PiggyBackMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 mb_id = 1;
  for (int i = 0, n = this->mb_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->mb_id(i), output);
  }

  // repeated .FTSFC.PiggyBackState pb_state = 2;
  for (unsigned int i = 0, n = this->pb_state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pb_state(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FTSFC.PiggyBackMessage)
}

::google::protobuf::uint8* PiggyBackMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTSFC.PiggyBackMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 mb_id = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->mb_id_, target);

  // repeated .FTSFC.PiggyBackState pb_state = 2;
  for (unsigned int i = 0, n = this->pb_state_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pb_state(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTSFC.PiggyBackMessage)
  return target;
}

size_t PiggyBackMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTSFC.PiggyBackMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 mb_id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->mb_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mb_id_size());
    total_size += data_size;
  }

  // repeated .FTSFC.PiggyBackState pb_state = 2;
  {
    unsigned int count = this->pb_state_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pb_state(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PiggyBackMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FTSFC.PiggyBackMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PiggyBackMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PiggyBackMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FTSFC.PiggyBackMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FTSFC.PiggyBackMessage)
    MergeFrom(*source);
  }
}

void PiggyBackMessage::MergeFrom(const PiggyBackMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTSFC.PiggyBackMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mb_id_.MergeFrom(from.mb_id_);
  pb_state_.MergeFrom(from.pb_state_);
}

void PiggyBackMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FTSFC.PiggyBackMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiggyBackMessage::CopyFrom(const PiggyBackMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTSFC.PiggyBackMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiggyBackMessage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->pb_state())) return false;
  return true;
}

void PiggyBackMessage::Swap(PiggyBackMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiggyBackMessage::InternalSwap(PiggyBackMessage* other) {
  mb_id_.InternalSwap(&other->mb_id_);
  pb_state_.InternalSwap(&other->pb_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PiggyBackMessage::GetMetadata() const {
  protobuf_types_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_types_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PiggyBackMessage

// repeated int32 mb_id = 1;
int PiggyBackMessage::mb_id_size() const {
  return mb_id_.size();
}
void PiggyBackMessage::clear_mb_id() {
  mb_id_.Clear();
}
::google::protobuf::int32 PiggyBackMessage::mb_id(int index) const {
  // @@protoc_insertion_point(field_get:FTSFC.PiggyBackMessage.mb_id)
  return mb_id_.Get(index);
}
void PiggyBackMessage::set_mb_id(int index, ::google::protobuf::int32 value) {
  mb_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:FTSFC.PiggyBackMessage.mb_id)
}
void PiggyBackMessage::add_mb_id(::google::protobuf::int32 value) {
  mb_id_.Add(value);
  // @@protoc_insertion_point(field_add:FTSFC.PiggyBackMessage.mb_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PiggyBackMessage::mb_id() const {
  // @@protoc_insertion_point(field_list:FTSFC.PiggyBackMessage.mb_id)
  return mb_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PiggyBackMessage::mutable_mb_id() {
  // @@protoc_insertion_point(field_mutable_list:FTSFC.PiggyBackMessage.mb_id)
  return &mb_id_;
}

// repeated .FTSFC.PiggyBackState pb_state = 2;
int PiggyBackMessage::pb_state_size() const {
  return pb_state_.size();
}
void PiggyBackMessage::clear_pb_state() {
  pb_state_.Clear();
}
const ::FTSFC::PiggyBackState& PiggyBackMessage::pb_state(int index) const {
  // @@protoc_insertion_point(field_get:FTSFC.PiggyBackMessage.pb_state)
  return pb_state_.Get(index);
}
::FTSFC::PiggyBackState* PiggyBackMessage::mutable_pb_state(int index) {
  // @@protoc_insertion_point(field_mutable:FTSFC.PiggyBackMessage.pb_state)
  return pb_state_.Mutable(index);
}
::FTSFC::PiggyBackState* PiggyBackMessage::add_pb_state() {
  // @@protoc_insertion_point(field_add:FTSFC.PiggyBackMessage.pb_state)
  return pb_state_.Add();
}
::google::protobuf::RepeatedPtrField< ::FTSFC::PiggyBackState >*
PiggyBackMessage::mutable_pb_state() {
  // @@protoc_insertion_point(field_mutable_list:FTSFC.PiggyBackMessage.pb_state)
  return &pb_state_;
}
const ::google::protobuf::RepeatedPtrField< ::FTSFC::PiggyBackState >&
PiggyBackMessage::pb_state() const {
  // @@protoc_insertion_point(field_list:FTSFC.PiggyBackMessage.pb_state)
  return pb_state_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace FTSFC

// @@protoc_insertion_point(global_scope)
